generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://weichunnn:tvs5M3qRPwfh@ep-winter-bird-45355438.us-east-2.aws.neon.tech/cuepal?sslmode=require"
}

model User {
  id               String            @id @default(uuid())
  classesTaught    Class[]           @relation("ClassesTaught")
  classEnrollments ClassEnrollment[]
  cueCards         CueCard[]
  notes            Notes[]
  questions        Question[]
}

model Class {
  id               String            @id @default(uuid())
  name             String
  description      String
  teacherId        String
  teacher          User              @relation("ClassesTaught", fields: [teacherId], references: [id])
  classEnrollments ClassEnrollment[]
  classSessions    ClassSession[]
  cueCards         CueCard[]
  questions        Question[]
}

model ClassSession {
  id         String      @id @default(uuid())
  date       DateTime
  classId    String
  lessonPlan String
  transcript String
  analytics  Analytics[]
  class      Class       @relation(fields: [classId], references: [id])
  cueCards   CueCard[]
  notes      Notes[]
  questions  Question[]
}

model Notes {
  id             String       @id @default(uuid())
  content        String
  userId         String
  classSessionId String
  classSession   ClassSession @relation(fields: [classSessionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Question {
  id             String       @id @default(uuid())
  content        String
  options        Json
  correctAnswer  String
  explanation    String
  userId         String
  classSessionId String
  classId        String
  class          Class        @relation(fields: [classId], references: [id])
  classSession   ClassSession @relation(fields: [classSessionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model CueCard {
  id             String       @id @default(uuid())
  content        String
  answer         String
  userId         String
  classSessionId String
  classId        String
  class          Class        @relation(fields: [classId], references: [id])
  classSession   ClassSession @relation(fields: [classSessionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Analytics {
  id             String       @id @default(uuid())
  classSessionId String
  averageFeeling Int
  otherMetrics   String?
  classSession   ClassSession @relation(fields: [classSessionId], references: [id])
}

model ClassEnrollment {
  id      String @id @default(uuid())
  userId  String
  classId String
  class   Class  @relation(fields: [classId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}
